Корисни работи :

1. Отварање на датотека за читање

------------

FILE *datoteka;

if((datoteka = fopen("vlezna_datoteka.txt", "r")) == NULL) {
    printf("Greshka pri otvaranje na vleznata datoteka !!!\n");
    return -1;
}

------------


2. Отварање на датотека за пишување

------------

FILE *datoteka;

if((datoteka = fopen("izlezna_datoteka.txt", "w")) == NULL) {
    printf("Greshka pri otvaranje na izleznata datoteka !!!\n");
    return -1;
}

------------


3. Читање на карактер од датотека сѐ додека не се дојди до крај на датотеката

------------

while ((c = fgetc(dat)) != EOF) {
    printf("%c\n", c)
}

------------


4. Читање на реченица со одредена големина (бафер) од датотека

------------

fgets(recenica, 100, dat); // recenica - низа од карактери, 100 - бафер т.е. максималната големина на recenica, dat - покажувач кон FILE*

Доколку сакаме да ги читаме сите реченици од датотеката соодветно, треба да се оди сѐ додека fgets не врати NULL

while (fgets(recenica, 100, dat) != NULL) {
    BrojNaRecenici++;
}

------------


5. Пишување на карактер по карактер во излезна датотека од некоја текстуална низа

------------

for (i=0; i<n; i++) {
    fputc(niza[i], dat)     // n - големината на низата; dat - излезна датотека
}

------------


6. Пишување на целосна низа од карактери одеднаш во излезна датотека

------------

fputs(recenica, dat)        // recenica - текстуална низа; dat - излезна датотека

------------




7. Собирање на елементи од главна дијагонала на квадратна матрица

-----------

for (i=0; i<n; i++) {
    suma += matrica[i][i];
}

----------


8. Собирање на елементи од споредна дијагонала на квадратна матрица

---------

for (i=0; i<n; i++) {
    suma += matrica[i][n-1-i];
}

---------


9. Собирање на елементи од триаголник над главната дијагонала:

----------

for (i=0; i<n-1; i++) {
    for (j=0; j<n-1-i; j++) {
        zbir += matrica[i][j];
    }
}

---------

10. Собирање на елементи од триаголник под главната дијагонала:

---------

for (i=1; i<n; i++) {
    for (j=0; j<i; j++) {
        zbir += matrica[i][n-1-j];
    }
}

--------

11. Собирање на елементи од триаголник над споредната дијагонала

--------
for (i=0; i<n-1; i++) {
    for (j=1+i; j<=n-1; j++) {
        zbir += matrica[i][j];
    }
}
--------


12. Собирање на елементи од триаголник под споредната дијагонала

--------
for (i=1; i<=n-1; i++) {
    for (j=0; j<i; j++) {
        zbir += matrica[i][j];
    }
}
--------


13. Симетрично заменување на местата на елементите од матрицата во однос на главната дијагонала

--------
for (i=0; i<n-1; i++) {
    for (j=0; j<=i; j++) {
        temp = matrica[j][n-1-i+j];
        matrica[j][n-1-i+j] = matrica[n-1-i+j][j];
        matrica[n-1-i+j][j] = temp;
    }
}

--------


14. Симетрично заменување на местата на елементите од матрицата во однос на споредната дијагонала

-------
for (i=1; i<=n-1; i++) {
    for (j=0; j<i; j++) {
        temp = matrica[i-1-j][j];
        matrica[i-1-j][j] = matrica[n-1-j][n-i+j];
	matrica[n-1-j][n-i+j] = temp;
    }
}
-------
